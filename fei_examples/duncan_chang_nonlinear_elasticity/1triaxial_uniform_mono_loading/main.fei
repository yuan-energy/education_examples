model name "DP";

// Parameters:
rho = 0.0*kg/m^3;
nu = 0.0;
E = 1E7*N/m^2;
//
phi   = 1;
phirad = pi*phi/180;
eta = 6*sin(phirad)/(3-sin(phirad));
// Define the material:
// add material # 1 type DruckerPragerNonAssociateArmstrongFrederick
//     mass_density = rho
//     elastic_modulus = E
//     poisson_ratio = nu
//     druckerprager_k = eta
//     armstrong_frederick_ha = E
//     armstrong_frederick_cr = 100 
//     isotropic_hardening_rate = 0*Pa
//     initial_confining_stress = 1*Pa
//     plastic_flow_xi = 0.0
//     plastic_flow_kd = 0.0 ;
add material # 1 type Duncan_Chang_nonlinear_elastic_isotropic_3d_LT 
    mass_density = 0. * kg/m^3 
    initial_elastic_modulus = 1E6 * Pa 
    poisson_ratio= 0.15
    DuncanChang_K = 1E2  
    DuncanChang_pa = 1E5 * Pa  
    DuncanChang_n = 0.5  ;
// define the node:
add node # 1 at (0*m,0*m,1*m)  with 3 dofs;
add node # 2 at (1*m,0*m,1*m)  with 3 dofs;
add node # 3 at (1*m,1*m,1*m)  with 3 dofs;
add node # 4 at (0*m,1*m,1*m)  with 3 dofs;

add node # 5 at (0*m,0*m,0*m)  with 3 dofs;
add node # 6 at (1*m,0*m,0*m)  with 3 dofs;
add node # 7 at (1*m,1*m,0*m)  with 3 dofs;
add node # 8 at (0*m,1*m,0*m)  with 3 dofs;

// Define the element.
add element # 1 type 8NodeBrick with nodes (1, 2, 3, 4, 5, 6, 7, 8) use material # 1;

new loading stage "1Confine" ;

fix node # 5 dofs all;
fix node # 6 dofs uy uz;
fix node # 8 dofs ux uz;

press = 30 * kPa;
add load # 1 to node # 1 type linear Fz = - press *m^2 ;
add load # 2 to node # 2 type linear Fz = - press *m^2 ;
add load # 3 to node # 3 type linear Fz = - press *m^2 ;
add load # 4 to node # 4 type linear Fz = - press *m^2 ;
add load # 5 to node # 5 type linear Fz = press *m^2 ;
add load # 6 to node # 6 type linear Fz = press *m^2 ;
add load # 7 to node # 7 type linear Fz = press *m^2 ;
add load # 8 to node # 8 type linear Fz = press *m^2 ;

add load #  9 to node # 1 type linear Fx = press *m^2 ;
add load # 10 to node # 4 type linear Fx = press *m^2 ;
add load # 11 to node # 8 type linear Fx = press *m^2 ;
add load # 12 to node # 5 type linear Fx = press *m^2 ;
add load # 13 to node # 2 type linear Fx = - press *m^2 ;
add load # 14 to node # 3 type linear Fx = - press *m^2 ;
add load # 15 to node # 6 type linear Fx = - press *m^2 ;
add load # 16 to node # 7 type linear Fx = - press *m^2 ;

add load # 17 to node # 1 type linear Fy = press *m^2 ;
add load # 18 to node # 2 type linear Fy = press *m^2 ;
add load # 19 to node # 6 type linear Fy = press *m^2 ;
add load # 20 to node # 5 type linear Fy = press *m^2 ;
add load # 21 to node # 3 type linear Fy = - press *m^2 ;
add load # 22 to node # 7 type linear Fy = - press *m^2 ;
add load # 23 to node # 8 type linear Fy = - press *m^2 ;
add load # 24 to node # 4 type linear Fy = - press *m^2 ;

define NDMaterial constitutive integration algorithm Backward_Euler
    yield_function_relative_tolerance =  1E-7
    stress_relative_tolerance =  1E-7
    maximum_iterations = 100;

define solver UMFPack;
//define algorithm With_no_convergence_check ;
define convergence test Norm_Unbalance
    tolerance = 0.1
    maximum_iterations =  50
    verbose_level = 4;
define algorithm Newton;
// define algorithm NewtonLineSearch ;
Nstep = 30;
define load factor increment 1/Nstep;
simulate Nstep steps using static algorithm;

bye;  
