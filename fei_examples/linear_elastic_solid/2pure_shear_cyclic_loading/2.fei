model name "vonMises";
// Define the material:
add material # 1 type linear_elastic_isotropic_3d
    mass_density = 0.0*kg/m^3
    elastic_modulus = 2E7*N/m^2
    poisson_ratio = 0.0;
// define the node:
add node # 1 at (0*m,0*m,1*m)  with 3 dofs;
add node # 2 at (1*m,0*m,1*m)  with 3 dofs;
add node # 3 at (1*m,1*m,1*m)  with 3 dofs;
add node # 4 at (0*m,1*m,1*m)  with 3 dofs;
add node # 5 at (0*m,0*m,0*m)  with 3 dofs;
add node # 6 at (1*m,0*m,0*m)  with 3 dofs;
add node # 7 at (1*m,1*m,0*m)  with 3 dofs;
add node # 8 at (0*m,1*m,0*m)  with 3 dofs;
// Define the element.
add element # 1 type 8NodeBrick with nodes (1, 2, 3, 4, 5, 6, 7, 8) use material # 1;
new loading stage "shearing";
fix node # 1 dofs uy ux;
fix node # 2 dofs uy ux;
fix node # 3 dofs uy ux;
fix node # 4 dofs uy ux;
fix node # 5 dofs all;
fix node # 6 dofs all;
fix node # 7 dofs all;
fix node # 8 dofs all;
mot = 1;
dt = 1E2*s ; 
while (mot < 5 ) {
    add imposed motion # mot to node # mot dof ux 
        time_step =  dt
        displacement_scale_unit =  1*m 
        displacement_file =  "path.txt" 
        velocity_scale_unit =  0*m/s 
        velocity_file =  "path.txt" 
        acceleration_scale_unit =  0.0*m/s^2 
        acceleration_file = "path.txt";
    mot = mot + 1;
    };
define solver ProfileSPD;
define convergence test Norm_Displacement_Increment
    tolerance = 1E-12 
    maximum_iterations =  50
    verbose_level = 4;
define algorithm Newton ;
define dynamic integrator Newmark with 
    gamma = 0.5 
    beta = 0.25;
define NDMaterial constitutive integration algorithm Forward_Euler;
simulate 499 steps using transient algorithm 
    time_step = dt;
bye;  
